// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TransactionStatus {
  pending
  paid
  failedq
  cancelled
}

model User {
  id             String        @id @map("id")
  email          String?       @unique @map("email")
  username       String        @map("username")
  profilePicture String?       @map("profile_picture")
  roleId         Int           @default(1) @map("role_id")
  createdAt      DateTime      @default(now()) @map("created_at")
  updatedAt      DateTime      @updatedAt @map("updated_at")
  role           Role          @relation(fields: [roleId], references: [id])
  membership     Membership?   @relation
  couponWallet   CouponWallet? @relation
  authMethod     AuthMethod[]
  Transaction    Transaction[]

  @@map("users")
}

model CouponWallet {
  id        String   @id @map("id")
  userId    String   @unique @map("user_id")
  balance   Int      @default(0) @map("balance")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("coupon_wallets")
}

model Membership {
  id               String          @id @map("id")
  userId           String          @unique @map("user_id")
  startDate        DateTime?       @map("start_date")
  endDate          DateTime?       @map("end_date")
  membershipTypeId String?         @map("membership_type_id")
  createdAt        DateTime        @default(now()) @map("created_at")
  updatedAt        DateTime        @updatedAt @map("updated_at")
  membershipType   MembershipType? @relation(fields: [membershipTypeId], references: [id])
  user             User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("memberships")
}

model AuthMethod {
  id         Int      @id @default(autoincrement()) @map("id")
  userId     String   @map("user_id")
  provider   String   @map("provider")
  providerId String?  @unique @map("provider_id")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, provider])
  @@map("auth_methods")
}

model Role {
  id        Int      @id @default(autoincrement()) @map("id")
  name      String   @map("name")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  users     User[]   @relation

  @@map("roles")
}

model MembershipType {
  id              String            @id @map("id")
  name            String            @map("name")
  price           Int               @map("price")
  duration_in_day Int               @map("duration_in_day")
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @updatedAt @map("updated_at")
  memberships     Membership[]      @relation
  TransactionItem TransactionItem[]

  @@map("membership_types")
}

model Niche {
  id        Int        @id @default(autoincrement()) @map("id")
  name      String     @map("name")
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  SubNiches SubNiche[]

  @@map("niches")
}

model SubNiche {
  id        Int      @id @default(autoincrement()) @map("id")
  name      String   @map("name")
  nicheId   Int      @map("niche_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  niche     Niche    @relation(fields: [nicheId], references: [id])

  @@map("sub_niches")
}

model CouponPackage {
  id              String            @id @map("id")
  name            String            @map("name")
  price           Int               @map("price")
  total_coupons   Int               @map("total_coupons")
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @updatedAt @map("updated_at")
  TransactionItem TransactionItem[]

  @@map("coupon_packages")
}

model Transaction {
  id               String            @id @map("id")
  userId           String            @map("user_id")
  userName         String            @map("user_name")
  userEmail        String?           @map("user_email")
  totalAmount      Int               @map("total_amount")
  snapToken        String?           @map("snap_token")
  snapUrl          String?           @map("snap_url")
  status           TransactionStatus @map("status")
  paymentMethod    String?           @map("payment_method")
  createdAt        DateTime          @default(now()) @map("created_at")
  updatedAt        DateTime          @updatedAt @map("updated_at")
  transactionItems TransactionItem[]
  user             User              @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([userName])
  @@map("transactions")
}

model TransactionItem {
  id               String          @id @map("id")
  transactionId    String          @map("transaction_id")
  amount           Int             @map("amount")
  couponPackageId  String?         @map("coupon_package_id")
  membershipTypeId String?         @map("membership_type_id")
  createdAt        DateTime        @default(now()) @map("created_at")
  updatedAt        DateTime        @updatedAt @map("updated_at")
  transaction      Transaction     @relation(fields: [transactionId], references: [id])
  couponPackage    CouponPackage?  @relation(fields: [couponPackageId], references: [id])
  membershipType   MembershipType? @relation(fields: [membershipTypeId], references: [id])

  @@map("transaction_items")
}
