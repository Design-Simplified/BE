// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String        @id @map("id")
  email          String?       @unique @map("email")
  username       String        @map("username")
  profilePicture String?       @map("profile_picture")
  roleId         Int           @default(1) @map("role_id")
  createdAt      DateTime      @default(now()) @map("created_at")
  updatedAt      DateTime      @updatedAt @map("updated_at")
  role           Role          @relation(fields: [roleId], references: [id])
  membership     Membership?   @relation
  couponWallet   CouponWallet? @relation
  authMethod     AuthMethod[]

  @@map("users")
}

model CouponWallet {
  id        String   @id @map("id")
  userId    String   @unique @map("user_id")
  balance   Int      @default(0) @map("balance")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("coupon_wallets")
}

model Membership {
  id               String          @id @map("id")
  userId           String          @unique @map("user_id")
  startDate        DateTime?       @map("start_date")
  endDate          DateTime?       @map("end_date")
  membershipTypeId Int?            @map("membership_type_id")
  createdAt        DateTime        @default(now()) @map("created_at")
  updatedAt        DateTime        @updatedAt @map("updated_at")
  membershipType   MembershipType? @relation(fields: [membershipTypeId], references: [id])
  user             User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("memberships")
}

model AuthMethod {
  id         Int      @id @default(autoincrement()) @map("id")
  userId     String   @map("user_id")
  provider   String   @map("provider")
  providerId String   @unique @map("provider_id")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, provider])
  @@map("auth_methods")
}

model Role {
  id        Int      @id @default(autoincrement()) @map("id")
  name      String   @map("name")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  users     User[]   @relation

  @@map("roles")
}

model MembershipType {
  id          Int          @id @default(autoincrement()) @map("id")
  name        String       @map("name")
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")
  memberships Membership[] @relation

  @@map("membership_types")
}
